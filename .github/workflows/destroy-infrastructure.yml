# .github/workflows/destroy-infrastructure.yml
name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm destruction'
        required: true
        default: ''
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VERSION: "1.6.0"

jobs:
  confirm-destruction:
    name: Confirm Destruction
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "destroy" ]; then
          echo "‚ùå Destruction not confirmed. Please type 'destroy' to proceed."
          exit 1
        fi
        echo "‚úÖ Destruction confirmed"

  cleanup-kubernetes:
    name: Cleanup Kubernetes Resources
    runs-on: ubuntu-latest
    needs: confirm-destruction
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get cluster information
      id: cluster_info
      continue-on-error: true
      run: |
        CLUSTER_NAME=$(aws ssm get-parameter --name "/wordpress-eks/prod/eks/cluster-name" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
        echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

    - name: Update kubeconfig
      if: steps.cluster_info.outputs.cluster_name != ''
      continue-on-error: true
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.cluster_info.outputs.cluster_name }}

    - name: Delete WordPress namespace
      if: steps.cluster_info.outputs.cluster_name != ''
      continue-on-error: true
      run: |
        kubectl delete namespace wordpress --ignore-not-found=true --timeout=300s || true

    - name: Delete AWS Load Balancer Controller
      if: steps.cluster_info.outputs.cluster_name != ''
      continue-on-error: true
      run: |
        kubectl delete -f k8s-manifests/aws-load-balancer-controller.yaml --ignore-not-found=true --timeout=300s || true

    - name: Delete cert-manager
      if: steps.cluster_info.outputs.cluster_name != ''
      continue-on-error: true
      run: |
        kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v1.13.1/cert-manager.yaml --ignore-not-found=true --timeout=300s || true

    - name: Wait for finalizers
      if: steps.cluster_info.outputs.cluster_name != ''
      run: |
        echo "Waiting for resources to be fully deleted..."
        sleep 60

  cleanup-iam:
    name: Cleanup IAM Resources
    runs-on: ubuntu-latest
    needs: cleanup-kubernetes
    continue-on-error: true
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Cleanup Load Balancer Controller IAM
      continue-on-error: true
      run: |
        # Detach policy from role
        aws iam detach-role-policy \
          --role-name AmazonEKSLoadBalancerControllerRole \
          --policy-arn "arn:aws:iam::${{ steps.account.outputs.account_id }}:policy/AWSLoadBalancerControllerIAMPolicy" || true
        
        # Delete role
        aws iam delete-role --role-name AmazonEKSLoadBalancerControllerRole || true
        
        # Delete policy
        aws iam delete-policy --policy-arn "arn:aws:iam::${{ steps.account.outputs.account_id }}:policy/AWSLoadBalancerControllerIAMPolicy" || true

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: cleanup-iam
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: terraform/environments/prod
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=wordpress-eks/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Destroy
      working-directory: terraform/environments/prod
      run: |
        terraform destroy -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}"

    - name: Cleanup SSM Parameters
      continue-on-error: true
      run: |
        # Delete SSM parameters
        aws ssm delete-parameters --names \
          "/wordpress-eks/prod/mysql/root-password" \
          "/wordpress-eks/prod/mysql/wordpress-password" \
          "/wordpress-eks/prod/eks/cluster-name" \
          "/wordpress-eks/prod/eks/cluster-endpoint" \
          "/wordpress-eks/prod/vpc/vpc-id" \
          "/wordpress-eks/prod/efs/file-system-id" \
          "/wordpress-eks/prod/efs/access-point-id" || true

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: terraform-destroy
    if: always()
    
    steps:
    - name: Display cleanup summary
      run: |
        echo "üßπ Infrastructure Cleanup Summary"
        echo "=================================="
        echo "‚úÖ Kubernetes resources: Deleted"
        echo "‚úÖ IAM resources: Cleaned up"
        echo "‚úÖ Infrastructure: Destroyed"
        echo "‚úÖ SSM parameters: Cleaned up"
        echo ""
        echo "üéâ All resources have been successfully removed!"
        echo ""
        echo "‚ö†Ô∏è  Note: Please verify in AWS Console that all resources are deleted"
        echo "üìù Check for any remaining:"
        echo "   - Load Balancers"
        echo "   - Security Groups"
        echo "   - EBS Volumes"
        echo "   - Route53 records (if any)"